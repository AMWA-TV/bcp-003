#%RAML 1.0

# AMWA NMOS BCP-003 Security: NMOS OAuth API with JSON Web Tokens
# (c) AMWA 2019

title: NMOS Oauth
baseUri: http://api.example.com/x-nmos/oauth/{version}
version: v1.0
mediaType: application/json
securitySchemes: !include SecuritySchemes.raml

documentation:
  - title: Overview
    content: |
      The NMOS Oauth Security API is exposed by an NMOS Authorization Server as a standard interface for requesting, revoking, and managing tokens and client registration
  - title: Endpoint Discovery
    content: |
      The NMOS OAuth Authorization Server URL is discoverable using unicast and/or multicast DNS using the '_nmos-oauth._tcp' service name

traits:
  OAuthBasic:
    headers:
      Authorization:
        displayName: OAuth 2.0 Basic Authorization
        description: Basic authentication (base-64 encoded string) of Username (Client ID) and Password (Client Secret)
        type: string
        required: true

  authorizationCodeRequest:
    queryParameters:
      response_type:
        description: Type of OAuth 2.0 response. MUST be set to "code"
        required: true
      client_id:
        description: The identifier of the client authenticating
        required: true
      redirect_uri:
        description: URI to direct resource owner's user-agent back to clients
        required: false
      scope:
        description: The scope of the access request
        required: false
      state:
        description: Value used by client to maintain state between request and callback
        required: false

types:
  tokenAuthorizeRequest:
    properties:
      grant_type:
        description: The OAuth 2.0 grant type of the request
        type: string
        required: true
      code:
        description:  The authorization code received from the authorization server
        type: string
        required: true
      redirect_uri:
        description: Absolute URI used by the auth server to redirect the user-agent, previously established during client registration
        type: string
      client_id:
        description: The identifier of the client authenticating
        type: string

  tokenPasswordRequest:
    properties:
      grant_type:
        description: The OAuth 2.0 grant type of the request
        type: string
        required: true
      username:
        description: Username for the Password Credentials Grant
        type: string
        required: true
      password:
        description: Password for the Password Credentials grant_type
        type: string
        required: true
      scope:
        description: A single scope entry to define the scope of the request_token
        type: string
        required: true

  tokenRefreshRequest:
    properties:
        grant_type:
          description: MUST be set to "refresh_token"
          required: true
        refresh_token:
          description: The refresh token issued to the client inside the bearer token
          required: true
        scope:
          description: The scope of the access request
          required: false

  registerClientRequest:
    properties:
      client_name:
        description: Name of Client
        type: string
      client_uri:
        description: URI of client
        type: string
      scope:
        description: List of possible scopes, *space-separated*
        type: string
      redirect_uri:
        description: Used by the authorization server to return responses containing authorization credentials to the client
        type: array
        required: true
      grant_types:
        description: The type of permissable OAuth 2.0 grants
        type: array
        items:
          enum: [ authorization_code, implicit, password, client_credentials, refresh_token, urn:ietf:params:oauth:grant-type:jwt-bearer ]
        default: [ authorization_code ]
      response_types:
        description: Used to define the valid response types of the client
        type: array
        items:
          enum: [ code, token ]
        default: [ code ]
      token_endpoint_auth_method:
        description: Defines whether client credentials are passed via Basic Auth or via POST body
        type: string
        enum: [ client_secret_post, client_secret_basic, none ]



/:
  displayName: Home Page
  securedBy: [ basic ]
  get:
    description: Auth Server login page / home page of the Authorization Server. This will likely detail registered-client-credentials and client info.
    responses:
      200:
        body:
          text/html:
            type: file

/register_client:
  displayName: Register Clients
  securedBy: [ basic ]
  get:
    description: UI / Web Form for registering details of OAuth 2.0 clients with the Auth Server
    responses:
      200:
        body:
          text/html:
            type: file
  post:
    description: |
      Resource for registering clients with auth server.

      **Note** - Request examples may render as JSON objects, but should be passed in as "application/x-www-form-urlencoded"
      data types, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749#section-3.1.2).
    body:
      application/x-www-form-urlencoded:
        type: registerClientRequest
        examples:
          RegisterClient:
            client_name:	Example App
            client_uri:	http://client.example.com
            scope: photos
            redirect_uri:	[http://client.example.com/home]
            grant_types:	[authorization_code, password]
            response_types: [code]
            token_endpoint_auth_method:	client_secret_basic

/token:
  displayName: Request Token Resource
  post:
    description: |
      Method for requesting OAuth 2.0 Bearer Token (Authorization, Password and Refresh Grants.)

      **Note** - The data flow is dependant on the chosen grant type (e.g. password, authorization_code, refresh grant, etc.)

      **Note** - Request examples may render as JSON objects, but should be passed in as "application/x-www-form-urlencoded"
      data types, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749#section-3.1.2).

    securedBy: [ basic ]
    is: ["OAuthBasic"]
    body:
      application/x-www-form-urlencoded:
        type: tokenPasswordRequest | tokenAuthorizeRequest | tokenRefreshRequest
        examples:
          PasswordGrant:
            grant_type: password
            username: Joe Bloggs
            password: secret
            scope: photos
          AuthCodeGrant:
            grant_type: code
            code: SplxlOBeZQQYbYS6WxSbIA
            redirect_uri: http://client.example.com/
            client_id: ttwCD9hb4OckmcGDnmC3J3Jr
          RefreshTokenGrant:
            grant_type: refresh_token
            refresh_token: tGzv3JOkF0XG5Qx2TlKWIA

    responses:
      200:
        description: Successful request to obtain a Bearer Token, consisting of the access token and optionally a refresh token to be used to request further access tokens.
        body:
          type: !include schemas/token_response.json
          example: !include ../examples/token_response_example.json

/certs:
  displayName: Certificates Resource
  get:
    description: Request the contents of the certs endpoints
    body:
    responses:
      200:
        description: Successful request to obtain JSON dictionary of available public keys to validate token against
        body:
          type: !include schemas/certs_response.json
          example: !include ../examples/certs_response_example.json

/authorize:
  displayName: Authorization Code Resource
  get:
    description: The confirmation page enabling the resource owner to approve the client
    is: ["authorizationCodeRequest"]
    responses:
      200:
        body:
          text/html:
            type: file
  post:
    description: Means of confirming Resource Owner approval
    queryParameters:
      confirm:
        description: Boolean comfirmation of Resource Owner authorization
        type: boolean
        required: true
    responses:
      302:
        description: Redirection of endpoint to client URI
        headers:
          Location:
            description: The redirect URI with the Auth Code and State parameters added to the query component of the redirection URI
            type: string
            required: true
            example: |
              HTTP/1.1 302 Found
              Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz


/revoke:
  displayName: Token Revocation Resource
  securedBy: basic
  is: ["OAuthBasic"]
  post:
    description: Endpoint for revoking specific access/refresh tokens
    body:
      application/x-www-form-urlencoded:
        properties:
          access_token:
            description: The token (access / refresh) that the client wants to revoke
            required: true
          token_type_hint:
            description: A hint about the type of the token submitted for revocation
            required: true
            enum: [ access_token, refresh_token ]
