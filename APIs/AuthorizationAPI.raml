#%RAML 1.0

# AMWA NMOS BCP-003 Security: NMOS OAuth API with JSON Web Tokens
# (c) AMWA 2019

title: NMOS Oauth
baseUri: http://api.example.com/x-nmos/oauth/{version}
version: v1.0
mediaType: application/json
securitySchemes: !include SecuritySchemes.raml

documentation:
  - title: Overview
    content: |
      The NMOS Oauth Security API is exposed by an NMOS Authorization Server as a standard interface for requesting, revoking, and managing tokens and client registration
  - title: Endpoint Discovery
    content: |
      The NMOS OAuth Authorization Server URL is discoverable using unicast and/or multicast DNS using the '_nmos-auth._tcp' service name

traits: !include traits.raml

types: !include types.raml

/:
  displayName: Home Page
  securedBy: [ basic ]
  is: ["Basic"]
  get:
    description: Auth Server login page / home page of the Authorization Server. This will likely detail registered-client-credentials and client info.
    responses:
      200:
        body:
          text/html:
            type: file

/register_client:
  displayName: Register Clients
  securedBy: [ basic ]
  is: ["Basic"]
  get:
    description: UI / Web Form for registering details of OAuth 2.0 clients with the Auth Server
    responses:
      200:
        body:
          text/html:
            type: file
  post:
    description: |
      Resource for registering clients with auth server.

      **Note** - Request examples may render as JSON objects, but should be passed in as "application/x-www-form-urlencoded"
      data types, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749#section-3.1.2).
    body:
      application/x-www-form-urlencoded:
        type: RegisterClientRequest
        examples:
          RegisterClient: !include ../examples/register-client-request.raml

/token:
  displayName: Request Token Resource
  post:
    description: |
      Method for requesting OAuth 2.0 Bearer Token (Authorization, Password and Refresh Grants.)

      **Note** - The data flow is dependant on the chosen grant type (e.g. password, authorization_code, refresh grant, etc.)

      **Note** - Request examples may render as JSON objects, but should be passed in as "application/x-www-form-urlencoded"
      data types, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749#section-3.1.2).
    securedBy: [ basic ]
    is: ["OAuthBasic"]
    body:
      application/x-www-form-urlencoded:
        type: TokenPasswordRequest | TokenAuthorizeRequest | TokenRefreshRequest
        examples: !include ../examples/token-requests.raml
    responses:
      200:
        description: Successful request to obtain a Bearer Token, consisting of the access token and optionally a refresh token to be used to request further access tokens.
        body:
          type: !include schemas/token_response.json
          example: !include ../examples/token-post-200.json
      400:
        description: Unsuccessful token requests
        body:
          type: !include schemas/token_error_response.json
          example: !include ../examples/token-post-400.json


/certs:
  displayName: Certificates Resource
  get:
    description: Request the contents of the certs endpoints
    responses:
      200:
        description: Successful request to obtain JSON dictionary of available public keys to validate token against
        body:
          type: !include schemas/certs_response.json
          example: !include ../examples/certs-get-200.json

/authorize:
  displayName: Authorization Code Resource
  get:
    description: The confirmation page enabling the resource owner to approve the client
    is: ["AuthorizationCodeRequest"]
    responses:
      200:
        body:
          text/html:
            type: file
  post:
    description: Means of confirming Resource Owner approval
    queryParameters:
      confirm:
        description: Boolean comfirmation of Resource Owner authorization
        type: boolean
        required: true
    responses:
      302:
        description: Redirection of endpoint to client URI
        headers:
          Location:
            description: The redirect URI with the Auth Code and State parameters added to the query component of the redirection URI
            type: string
            required: true
            example: |
              HTTP/1.1 302 Found
              Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz

/revoke:
  displayName: Token Revocation Resource
  securedBy: basic
  is: ["OAuthBasic"]
  post:
    description: Endpoint for revoking specific access/refresh tokens
    body:
      application/x-www-form-urlencoded:
        type: RevokeRequest
    responses:
      200:
        description: the token has been revoked successfully or if the client submitted an invalid token.
